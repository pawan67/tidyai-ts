name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      uses: actions/github-script@v6
      with:
        script: |
          const { repo: { owner, repo }, ref } = context;
          const tag = ref.replace('refs/tags/', '');
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: tag,
            name: `Release ${tag}`,
            draft: false,
            prerelease: false
          });
          core.setOutput('upload_url', release.data.upload_url);
      id: create_release

  build-and-package:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install pkg
      run: npm install -g pkg

    - name: Setup GitHub CLI
      run: gh --version

    - name: Package for Linux
      if: matrix.os == 'ubuntu-latest'
      run: pkg dist/index.js --targets node18-linux-x64 --output tidyai-linux

    - name: Package for Windows
      if: matrix.os == 'windows-latest'
      run: pkg dist/index.js --targets node18-win-x64 --output tidyai-win.exe

    - name: Package for macOS
      if: matrix.os == 'macos-latest'
      run: pkg dist/index.js --targets node18-mac-x64 --output tidyai-macos

    - name: Upload release assets
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const { repo: { owner, repo }, ref } = context;
          const tag = ref.replace('refs/tags/', '');
          const releaseId = '${{ needs.create-release.outputs.release_id }}';
          
          let assetPath, assetName;
          if (process.platform === 'linux') {
            assetPath = './tidyai-linux';
            assetName = 'tidyai-linux';
          } else if (process.platform === 'win32') {
            assetPath = './tidyai-win.exe';
            assetName = 'tidyai-win.exe';
          } else if (process.platform === 'darwin') {
            assetPath = './tidyai-macos';
            assetName = 'tidyai-macos';
          }

          if (assetPath && fs.existsSync(assetPath)) {
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: releaseId,
              name: assetName,
              data: fs.readFileSync(assetPath)
            });
          }